{
	"info": {
		"_postman_id": "21bb3e04-bb15-4e5d-82a7-7d932495f70e",
		"name": "HW_2_Daubniuk",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"\r",
							"pm.test(\"Correct string in the body \", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server\");\r",
							"});\r",
							"console.log(pm.response)\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Julia",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "26",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// pm.test(\"Status code is 200\", function () {\r",
							"// pm.expect( pm.response.code).to.eql(200);});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" \r",
							"var resp = pm.response.json();\r",
							"//console.log(pm.response)\r",
							"console.log(resp)\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(resp.name).to.eql(\"Julia\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(resp.age).to.eql(\"26\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(resp.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"var reqBody = request.data; \r",
							"console.log(pm.request); // простой, но не универсальный\r",
							"// console.log (request.data.name)\r",
							"// console.log (request.data.age)\r",
							"// console.log (request.data.salary)\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.\r",
							"\r",
							"pm.test (\"resp_name\", function(){\r",
							"    pm.expect (resp.name).have.eql(reqBody.name)});\r",
							"console.log (\"req_name = \" + reqBody.name);\r",
							"console.log (\"resp_name = \" + resp.name)\r",
							"\r",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test (\"resp_age\", function(){\r",
							"    pm.expect (resp.age).have.eql(reqBody.age)});\r",
							"console.log (\"req_age = \" + reqBody.age);\r",
							"console.log (\"resp_age = \" + resp.age)\r",
							"\r",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test (\"resp_salary\", function(){\r",
							"    pm.expect (resp.salary).have.eql+(reqBody.salary)});//передала числовое знач в строчное\r",
							"console.log (\"req_salary = \" + reqBody.salary);\r",
							"console.log (\"resp_salary = \" + resp.salary)\r",
							"//let salary = parseInt(1*resp.salary)передала числовое знач в строчное\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp.family)\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"var u_salary_1_5_year = resp.family[1]//почему не показывает 2й ключ в family\r",
							"pm.test (\"Check u_salary_1_5_year\", function(){\r",
							"    pm.expect (resp.u_salary_1_5_year).have.eql+(reqBody.salary*4)});\r",
							"console.log (resp.u_salary_1_5_year) //undefined\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Julia",
							"type": "text"
						},
						{
							"key": "age",
							"value": "26",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json. \r",
							"\r",
							"var resp = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"var reqBody = pm.request.url.query.toObject(); \r",
							"console.log(pm.request)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test (\"resp_name\", function(){\r",
							"    pm.expect (resp.name).have.eql(reqBody.name)});\r",
							"console.log (\"req_name = \" + reqBody.name);\r",
							"console.log (\"resp_name = \" + resp.name)\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test (\"resp_age\", function(){\r",
							"    pm.expect (resp.age).have.eql(reqBody.age)});\r",
							"console.log (\"req_age = \" + reqBody.age);\r",
							"console.log (\"resp_age = \" + resp.age)\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test (\"resp_salary\", function(){\r",
							"    pm.expect (resp.salary).have.eql+(reqBody.salary)});\r",
							"console.log (\"req_salary = \" + reqBody.salary + \"\" + typeof (reqBody.salary));\r",
							"console.log (\"resp_salary = \" + resp.salary + \"\" + typeof (resp.salary))\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resp.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"Check dog name\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"name\")});\r",
							"    console.log(resp.family.pets)\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"Check dog age\", function () {\r",
							"    pm.expect(resp.family.pets.dog).to.have.property(\"age\"); \r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Check Lucky name\", function () {\r",
							"    pm.expect(resp.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							" console.log(resp.family.pets.dog.name)\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Check age is 4\", function () {\r",
							"    pm.expect(resp.family.pets.dog.age).to.have.eql(4);\r",
							" console.log(resp.family.pets.dog.age)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Julia&age=26&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Julia"
						},
						{
							"key": "age",
							"value": "26"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"var resp = pm.response.json(); \r",
							"console.log(pm.response)\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"var reqBody = pm.request.url.query.toObject(); \r",
							"console.log(pm.request)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test (\"resp_name\", function(){\r",
							"    pm.expect (resp.name).have.eql(reqBody.name)});\r",
							"console.log (\"req_name = \" + reqBody.name);\r",
							"console.log (\"resp_name = \" + resp.name)\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test (\"resp_age\", function(){\r",
							"    pm.expect (resp.age).have.eql+(reqBody.age)});\r",
							"console.log (\"req_age = \" + reqBody.age);\r",
							"console.log (\"resp_age = \" + resp.age)\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"pm.test (\"resp_salary\", function(){\r",
							"    pm.expect (resp.salary).have.eql+(reqBody.salary)});\r",
							"console.log (\"req_salary = \" + reqBody.salary);\r",
							"console.log (\"resp_salary = \" + resp.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(resp.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(resp.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resp.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resp.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test (\"resp_salary\", function(){\r",
							"    pm.expect (resp.salary[0]).have.eql+(reqBody.salary)});\r",
							"console.log (\"req_salary = \" + reqBody.salary);\r",
							"console.log (\"resp_salary = \" + resp.salary[0])\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test (\"resp_salary1\", function(){\r",
							"    pm.expect (resp.salary[1]).have.eql+(reqBody.salary*2)});\r",
							"console.log (\"req_salary1 = \" + reqBody.salary*2);\r",
							"console.log (\"resp_salary1 = \" + resp.salary[1])\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test (\"resp_salary2\", function(){\r",
							"    pm.expect (resp.salary[2]).have.eql+(reqBody.salary*3)});\r",
							"console.log (\"req_salary2 = \" + reqBody.salary*3);\r",
							"console.log (\"resp_salary2 = \" + resp.salary[2])\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"\r",
							"pm.environment.set(\"name\",'Julia');\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"\r",
							"pm.environment.set ('age','26');\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"\r",
							"pm.environment.set ('salary','1000');\r",
							"\r",
							"// 18. Передать в окружение переменную name +\r",
							"// 19. Передать в окружение переменную age +\r",
							"// 20. Передать в окружение переменную salary +\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for (let i = 0; i < resp.salary.length; i++) {\r",
							"    console.log(\"Salary parameter from the environment = \" + resp.salary[i])};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Julia&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Julia"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request +\r",
							"// 2. Вставить параметр age из окружения в age +\r",
							"// 3. Вставить параметр name из окружения в name +\r",
							"// 4. Отправить запрос.\r",
							"\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"var resp = pm.response.json()\r",
							"console.log(pm.response)\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"var req = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"Check json response has 'start_qa_salary'\", function () {\r",
							"    pm.expect(resp).to.have.property(\"start_qa_salary\")});\r",
							"    console.log(\"json response = \" + resp.start_qa_salary)\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"Check json response has 'qa_salary_after_6_months'\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_6_months\")});\r",
							"    console.log(\"json response = \" + resp.qa_salary_after_6_months)\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"Check json response has 'qa_salary_after_12_months'\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_12_months\")});\r",
							"    console.log(\"json response = \" + resp.qa_salary_after_12_months)\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"Check json response has 'qa_salary_after_1.5_year'\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_1.5_year\")});\r",
							"    console.log(\"json response = \" + 'qa_salary_after_1.5_year') // ??как вывести число\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"Check json response has 'qa_salary_after_3.5_years'\", function(){\r",
							"    pm.expect(resp).to.have.property(\"qa_salary_after_3.5_years\")});\r",
							"    console.log(\"json response = \" + 'qa_salary_after_3.5_years') // \r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"Check json response has 'person'\", function(){\r",
							"    pm.expect(resp).to.have.property(\"person\")});\r",
							"    console.log(\"json response = \" + resp.person) //что показать в консоли\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check parameter start_qa_salary equals to salary\",function(){\r",
							"pm.expect(resp.start_qa_salary).to.be.eql+(req.salary)\r",
							"});\r",
							"console.log(\"start_qa_salary = \" + resp.start_qa_salary)\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check parameter 'qa_salary_after_6_months' equals to parameter 'salary*2' from request\" , function () {\r",
							"pm.expect(resp.qa_salary_after_6_months).to.be.eql+(req.salary*2)\r",
							"});\r",
							"console.log(\"qa_salary_after_6_months = \" + resp.qa_salary_after_6_months);\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check parameter 'qa_salary_after_12_months' equals to parameter 'salary*2.7' from request\" , function () {\r",
							"pm.expect(resp.qa_salary_after_12_months).to.be.eql+(req.salary*2.7)\r",
							"});\r",
							"console.log(\"qa_salary_after_12_months = \" + resp.qa_salary_after_12_months);\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Check parameter 'qa_salary_after_1.5_year' equals to parameter 'salary*3.3' from request\" , function () {\r",
							"pm.expect(resp[\"qa_salary_after_1.5_year\"]).to.be.eql+(req.salary*3.3)\r",
							"});\r",
							"console.log(\"qa_salary_after_1.5_year = \" + resp[\"qa_salary_after_1.5_year\"]);\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\\\r",
							"\r",
							"pm.test(\"Check parameter 'qa_salary_after_3.5_years' equals to parameter 'salary*3.8' from request\" , function () {\r",
							"pm.expect(resp[\"qa_salary_after_3.5_years\"]).to.be.eql+(req.salary*3.8)\r",
							"});\r",
							"console.log(\"qa_salary_after_3.5_years = \" + resp[\"qa_salary_after_3.5_years\"]);\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test (\"resp_person.u_name1\", function(){\r",
							"    pm.expect (resp.person.u_name[1]).have.eql+(req.salary)});\r",
							"console.log (\"req_salary = \" + req.salary);\r",
							"console.log (\"resp_person.u_name1 = \" + resp.person.u_name[1])\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test (\"resp_person.u_age\", function(){\r",
							"    pm.expect(resp.person.u_age).have.eql+(req.age)});\r",
							" console.log (\"resp_person.u_age = \" + resp.person.u_age);\r",
							" console.log (\"req_age = \" + req.age)\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test (\"resp_person.u_salary_5_years\", function(){\r",
							"    pm.expect(resp.person.u_salary_5_years).have.eql(req.salary*4.2)});\r",
							" console.log (\"resp_person.u_salary_5_years = \" + resp.person.u_salary_5_years);\r",
							" console.log (\"req_salary*4.2= \" + req.salary*4.2);\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"for(var key in resp.person) {\r",
							"   if(typeof(resp.person[key]) == 'object'){\r",
							"       for(let i = 0; i < Object.keys(resp.person[key]).length; i++){\r",
							"           console.log(resp.person[key][i]);\r",
							"       }\r",
							"   }\r",
							"   else if(typeof(resp.person[key]) != 'object') {\r",
							"        console.log(resp.person[key]);\r",
							"   }\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "",
			"type": "string"
		}
	]
}
